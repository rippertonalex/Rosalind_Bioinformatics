#!/usr/bin/env python
# coding: utf-8

# In[24]:


DNA = 'AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC'
def nuc_counter(DNA):
    A = 0
    C = 0
    G = 0 
    T = 0 
    for i in DNA:
        if i == 'A':
            A+=1
        if i == 'C':
            C+=1
        if i == 'G':
            G+= 1
        if i == 'T':
            T+=1
    print(A,C,G,T)
nuc_counter('CTGTAACAATTCGCCCATTTCCCAGTGCGCGAGGG')


# In[25]:


RNA = 'GATGGAACTTGACTACGTAAATT'
def make_RNA(RNA):
    new_rna = ""
    for i in RNA:
        if i == 'T':
            new_rna += 'U'
        else:
            new_rna += i
    return new_rna
make_RNA('GGTAACACCACTAGTATCCC')


# In[26]:


DNA = 'AAAACCCGGT'
def DNA_compliment(DNA):
    compliment = ''
    for i in DNA:
        if i == 'A':
            compliment += 'T'
        if i == 'C':
            compliment += 'G'
        if i == 'G':
            compliment += 'C'
        if i == 'T':
            compliment += 'A'
    return compliment[::-1]
DNA_compliment('ACGAGTACTTACGGCCCCGGCTAGAGTTAGCAGCGACGAA')


# In[27]:


#solved recursively
def wascally_wabits(n,k):
    parent = 1
    child = 1
    for i in range(n-1):
        child, parent = parent, parent + (child * k)
    return child

wascally_wabits(30,2)
        


# In[28]:


Rosalind_7954 = """CTCTGCTAATTGTATTCCGCGCAAGTCGAGTTAAGGGCGACGACCAGTCTCCGTGACGCT
CTCGGACCGTTAATAGTTGAAACTCCATTTGGGCGCATGTTTTATACTCTACTGTGTAAG
CTTATCGTAATGGACGGGAACATACATTTAGAGCTAGTGTCTGAACACGGCGAAAGCACA
AGCCCATACGGCAGCGTAAAGAAAGATGTTGCCCGAGCTAACTACTACTATTTGTGTGTT
CGAAGTCCTGTTTCTCTTTCCTGAAAAGAACCGCAGCCCACTACGATAATACCTGGGAAC
TGCGCTACCGGTCAGATGGCTTAGGCCTGTAACGTGGATCTGTGGAACAGTTAAAAGTCC
TTCACAACAAAGTGGAGTGGAGCAGCAATCCTAGTGAAGAATCCTGACTGTGGCGTCGTC
GTTTCCGTCCTCGCGTCAGGAGAACTGCGCGCTACGCAGTGGAACCCAGCTTCATAACCT
CGCACGTCATTAGACCGTTTGACGCCGTTTGGAGCAATTCGCTCTGGGGCTAGTAGCTGT
CCACTGTACTTCGTTTTTTGAAAGCGTGCTGGGGTCAACGACACTACCACGTCCAAACCC
TGGGTTATCAACCAGGCACGCCGGGTCTTAAATCGATAGCGACGAACACCTGGTGCACGA
TTCATAACGCGTGAATCGCAGTTACTTACAAACGTGTCAACACCTCTTGCGTTAAATAAA
TAGGGACCGGGGAAGAGCAAATGACTACACTCATAATAATATGAGAACATGACTATAATT
CAGGTGGTGCCTGTATAAACATATACGCCCAGAGCTATATTGATCCGCGTCGATCTGGCT
CTATCGTAAGACTTACAGATCTGAAATGATAACTTTGGCCGCT"""
Rosalind_8242 = """CGTTCTAGTAAAGGAGCGTCAGTCGACATCAGGGTCATTGACTTTGACGGCGGCTAGTTA
TGAATACCAACTGACGTGGGTGCAGCCAACGCTCCCGTCAACTAACACCTCGAACCTCGC
ACGACAACCGTTGCCGCGAAGCACCTACCAGGAAGATCTTTGTGCAACATTATCAACACT
CCAGCCCTGTTTTAAGGCAGTCTATTGATATACCACTGTGCGGGATGGCATTTAGTAGAC
AGTTAAGACGTCGTGTGTAGAGGCTGCGATCCGACGGTCAAACTCAACTTACCTAATTTA
ATGGAAATGATTACGAACCGTATTACGACGATAGCATCCCTCGGCACAGCGATCTTCTTA
GGTGTATCCCCGGGATGAAACTTACAATGGATGGCCATAGGGTTGTATCGTACGGCTGCA
GCGGCCTAGGGCTGATCTTATCAAGATCCCCTAAATGACCACGCATCTCATCAAATGGCA
TCTTCACCAGATTATATTGTTCGGAGGCTGGGCCAAACTCAAACGGCGGAAGTCGATTGG
ACGTTCTGCCCGGGTCTGACCTGATTCGGGCTTGTTTTTCGCGAATTACCTGACGGACGT
GCGTGTCGTGTTGACATTCGGGGTTCGGAAGCGGTATGAAGCTATATTATTCGCGAGTGG
GTAGCACCCCGCCGGGGTTCCTGCCGCTATCGTGGCGCTGCTTATTCCGGTCCTCTTGTA
TTGTCCTACCAGTGAGAAACGTGGCATTCGGCCACTCAGACGGTTTGATCCTGTCCACAC
CTCATTAGTTTTGCGGTACGCAAAAAATCGCCAATTGCCTCAAGTAAATCCGTCCACAGA
TGTAGTCTAAAGTCAATGGTACGCTAATAATTTTCCTTAACTCCTTGACTTCGGAGTCAT
GCTCGGCAGGCGTAACGAATCGCCGAGGCAAATCCCCATGACCATGGATACGCCGGCTAG
GTTATGAAGGGCCCATTAGACCT"""
Rosalind_2589 = """CCCCGATCATGGCTATCAGCATCGGTGCGAATCCCGACTTCTTTTCTTAGCGACTTTGGC
GCGGCGGGAATTTTGCTCCCTTGTTAGTAAGAACCGTCAGCGAGGGGTCTATTAAGTGCG
GGACTGGCAAGAGGGGGCATAGAGTCAGACATTTTTGTAAGCCCGAAATCATTACTGGCT
AATACAGGCGGTCAGAATCAAAAAGGGAGGGCGTTGGATAAAACCCGTATCGACTCCTCG
TCTCTTTTTCGCTCTAGTATGGGTAGCTCATGCACGGTTCTGCCTTCTAGCCGCACTGTT
AGAACAATTATACTTACGTATGAGGCTCTCCGAAGGTGAATATAGGCTCCGATGTTTCCA
TATAGTAAAATCCCTTCACTTCTCGCGAGAAGCCCTATATGTCCCTTGAAACTAGCAAAA
GATGGCGGCTGCTAGTTCGCAGACCGGCAATGAAAGAAGCATCTCCCGGTAAGTCGGCCG
ATGCAGATGTAGGAATGGGGGCGCTAGTAAAAGTATTACTCTAGATAAGTGAACTTACCA
GGAGGATCCGATGTTCTGAAGAGGGCAGAACTCCAACATAAACGGAGGGCGGCGATGAAT
CGCGACCAACGCTGTGGGTTCTAGTACGACTCTGTGCCTCTTGTGGCCGTTGGATTAATC
CCGATCAAGGAAGTAATAGTTCGACCGACTGGTCCGTCTTTCGGCTCTGTCACTGACTAC
TTCACAATTCCCATGGGGTCAGATATAAGTAATCTAATCTTGAGGAAAGTCATTCGTTGA
CCCTTACGTGATATCACTTATACGGGCGCTACAATAATGGCACCGTTCGACCCGGCTTCC
TCCTA"""
Rosalind_8041 = """TTTACAGGGAATGAAACCAAGATGTTCGGCGTAGGCCGAATGGCAATACCATGTCGCAAC
AAATGTAGCCATTCTCGTTGAGCCAGACGACCCCTTCATTGCCTTCGTATATCGGCAAGG
AGCTTAGCCGTACTTACACGGATCCGAAACATTTTGCACTCTTGAGCATCGTTAGGTTCT
TCACGGTCAAGCGTGATGTTAGTGCCATAACCAGGGTGGAACACGTTTCGCCGCATGTGT
TCCATAATTACTTACACGGTAGCGCAGTTATATTTATGCACACGGTCCGACTGGAAGTCG
CACTAAAGCACTCATCTGGACCTCGTCTCCGAATTACAGTACAAGATAGTCCTTTGCTTT
CCTGTGTATTAGTATCCGCCTAGCCACAATGTAAGACGACTTTCGTTATCCTCGGTCTAC
CTGCGGATATCGAGAAGAAATCGGTGTCGGCTTGCTGGACATATGCCTGTCAATAGGCAT
AAACATAAACGAGAGCCTACCGCTAACAGTCAACCACCACTACCTTTAAATCTACAAACC
GACGGGCCCAGAGGCACCCGACACCGTCCATCGAAATCGCATAGACCGACTCGTCTTGCG
AGTGCTGCCACGTAACGGTACCAAGATGGCAAAGGCGTAGCGGGATCCTGACAAGCCCCT
GATCCGGGACTTGGGCGGACATAATACTACATATTGTAGAACGGCTCATGAGCAAAAACT
AAACGGCCCCGCTCCTGGTTGATACACCTACGTGCACGTGAGTTACGCCTTAGTATAAGT
AATCCTACCGGGTATCTTGGTTATACCCGGGCGACTCCAGCGATGCTATACGTTCAAGAC
AGAGACGACTACTGGAGTC"""
Rosalind_8077 = """TAGGATCCCATAGTTCGCAGTCACAACCCTTCACTCCGAAGGTGCGTGGGTGCATGTTCA
GCTGTATGTTCTGACTGGGTGAGGATGACGGAACGATGCCCTTGCGGGTTCTAATGAACC
ACATCGTTTAACAGTAACCTTATACCCCTGTATGCTGCTCTTGTAAACTCTCTTAGCTTT
CCGAGTGCGAACTGATTTATGTAGGGGATCCCCGCCTCCAGTGAAGGATTTCGGTCCGCG
AAGAAAGTGACCATCGCGAGTGTGCGGATTGCGTTTTAGGTTAGTGCCTACGCGGCCACC
ACAACGTTAGGACGGTATCTTCGGCAGCGTCTTAGTGTTCGTAATCACTGGCTAGCCGGA
GAGGGTATCTCTGTAGTGGGTCGCGCGTGCGGTACCGTCACTGCTTCGCTGAAGTAGGAA
TCGGGCCAGGTCCTTTAGCGCACCTCTCCCTATATATAGAACTTTTATCAAATCCATGCC
CAGTCCTGAGATCGAGACTCGGATGGCATGATTTTGGGCCGTCCCAGAATACAGGCTTAA
ACGCTCCATAACGCCTGATTTGTTGGCGGATCCCTAATGATTAGATGGAGAGATATCTGC
ACGGGGGTTCAGCATCTTTAGGGACCAAAGTCAGAGTATCAACAACGACCAGATAGCTAA
GTTATCGTGGAATCCAGCGCCCGGCCCCTAAGGTTCCTCATGTTTGAACTTGGTATTCAA
TGAAACGGTTCTATATCGGAATTACCCTCCGAGATAGTACGGCACATTAAATGCACCTGA
ACACCTACTCACCAATTTACACCGAGCCCCCGATAAAA"""
Rosalind_8069 = """"""
sequences = [Rosalind_7954, Rosalind_8242, Rosalind_2589, Rosalind_8041, Rosalind_8077]
names = ['Rosalind_7954', 'Rosalind_8242', 'Rosalind_2589', 'Rosalind_8041', 'Rosalind_8077']
def GC_content(sequences, names):
    GC_contents = []
    for i in sequences:
        GC = 0 
        for j in i:
            if j == 'G' or j== 'C':
                GC += 1
        GC_contents.append(GC / len(i))
    index = GC_contents.index(max(GC_contents))
    print(names[index])
    print(GC_contents[index] * 100)
GC_content(sequences, names)


# In[29]:


#hamming distance 
s = 'GCCACCGCGGTACACGACCCGATTGTCAAACAGTTTTACAGCTATGTTTGTACACATGTGCGTTACGTTATGTGCTTACTAGATCCGCGACGAACCATGCGTTGCGAACTTTTATGATATTTAGCTTCCCGCTAATCACATCGGCCACTTAATTCGCGAAATCTAGCTTAAATCTCCCCTTCTCTCTGGGCAACCGAAAGGTACCTACCTCGACTCGTACTTACAACGACCTCCAGAAAATGTAGTTCTTCCCTAGCTACACTCGTGCCAGAACCCCTTATGCCTGGGCGGACGCTTGTACTTGCAGGGTCGAGGTGCGTGGCAACACATGCGCGTGGGTCAGTATGAACGCCTACCCTGAGCTGTGCAGAAAGGTGATCAACACACCTCTTCCGCAATATTGTTGGGCAGTACAGGGAGATTAGTCGATACGAACGAGCTTTTCCATCGCCAGCTCGAGCTTATGATAAGAACCAAGATGTTTCTTAAGGCTCGTATTAAATACGTCACACTCACCTCTGATGAAAGTCACGCGCACTTCGCATTGCCGGAGTTGAGTAGCGTTGGACTTCATCAAGGCCTTCACCGATCCCGGGGTAATCTAAAAGTAGTCTAGTCTGGCATCTGTTTCTAAGCGAGTTGTACTTTTGTAGTTATTGCGTAGAATCTCGGAACCGGGATAAAGGCCGTACGGGACGAACTTGCCAGGACGGCGGGAATAGTGCGTTCCGCTCGGATGAGCGACTCAATCAACGGTCGCCTCGGTAGTTTGGGAGGCCCTACATGCCTGGAACCAAAGCGGCACCCCTCCCAATATTGCGTGTTCCCGCCCCGCATGGATTACTGAACCAAAAGAACAAATTGCTTGCCCGGGGACCTTCGCAATCGAAGACGAATCTGTTTTTCGTCCAAGACACCGATCGTCGTTC'
t = 'ACAACCGCGGAACGGCACCCTAGTTTCGAAAACGTCTGAAACTATGTAGTACCGTCAGACCAGTTCTCACGGTAGTTTGGGGAACCAGACTGCGCCGTGTTTTCAGTACTTTTTTGGGACATGAATCCCCGTAACTCAGCTCTACCACTTACATCGTAAACGATAGCTAGGCTCTCAGGCCCTTTGTGATCTAACAACCCTAGAAACTCACTGCTGTCACATACATGGTGATTGCGGGCACGGCTTTCATCGGTTGCTAAACTCGGTGCATAATCACTAAGGATTGGGCTAAACCAAGAACTGTAAAGGGTATGCAATTTTCGACCGTTAGGGGCCAGATCTGTGAGGCTTCAGACGCATTGCGGCTCCAAGTGGTGCTCATCATTCCGCGGGAGCACGATTTCTGGCACGAACATGGTGTCGCGAACTAACCAGCGTGCGGATCGAGCCGCTTAGCTAGGGGATGATTCGGAAGCCTACGTGTTTTATGGGGTGTTTCGTATGGTGTAGTATACCCTTTGATATTCGCCACGCGCGCTTCCCCGCCCCGTAACAGAAAGGACAATGACACAATAAGGGCGCTTACCGAACACTGGATGGACAACAATCTTATCGGACCGGCATCGGTTACACCGCGAGCTATAGACATGCAAGTTAAACCCCCTAGCTCGATCCTGGGTTAATTCGTGATCGGGTCGACCTTGAGATGACCTCATAGCTGCAGGGGTAACCTAGACCAATACAAACCGTCCAGCATTCCCTCAGTTAGGGCGAAGGCCGAAGGTGACGCGATTAATCGCTACATTCCTGCGTAAATCTCTTGTGTTCACCCATCGTGTATAACTGGCGCCATAGAGCCAGCGGCCAATACGCACCCCAGAGGAAGCGAAGATGACTATGATCTTAGTCCAAGTCTCTGTAATTCGGGC'
def mutations(s, t):
    num_mutations = 0 
    for i in range(len(s)):
        if s[i] != t[i]:
            num_mutations +=1
    return num_mutations
mutations(s,t)
        


# In[30]:


#k homozygous dom
#m hetero
#n recessive 
def inheritance(k,m,n):
    total = k+m+n
    n_n = (n/total) * ((n-1)/(total-1))
    m_m = ((m/total) * ((m-1)/(total-1))) *.25
    m_n = (m/total) * (n/(total-1))
    recessive = n_n + m_m + m_n
    return (1 - recessive)
inheritance(23,19,22)


# In[31]:


#mRNA ro protein sequence 
import numpy as np
import pandas as pd
import Bio
from Bio.Seq import Seq
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.SeqUtils import GC

mrna8 = Seq("CCGGGCCAUGA")

print(mrna8.translate(to_stop=True))


# In[13]:


#offspring
couples = [19028, 18558, 19956, 16681, 17360, 19872,]
def num_dom(couples):
    num = 0 
    if len(couples) != 6:
        print(error)
    else:
        num = couples[0] * 2 + couples[1] * 2 + couples[2] * 2 + couples[3] * 1.5 + couples[4] 
    return num
num_dom(couples)


# In[19]:


#mortal rabbits 

def mortal_wabbits(n,m):
    ages = [1] + [0]*(m-1)
    for i in range(n-1):
        ages = [sum(ages[1:])] + ages[:-1]
    print(sum(ages))

mortal_wabbits(84,18)


# In[32]:


weight_dict = { "A" : 71.03711, "C" : 103.00919, "D" : 115.02694, "E" : 129.04259, "F" : 147.06841, "G" : 57.02146, "H" : 137.05891, "I" : 113.08406, "K" : 128.09496, "L" : 113.08406, "M" : 131.04049, "N" : 114.04293, "P" : 97.05276, "Q" : 128.05858, "R" : 156.10111, "S" : 87.03203, "T" : 101.04768, "V" : 99.06841, "W" : 186.07931, "Y" : 163.06333, }
def weight(protein):
    total_weight = 0
    for i in protein:
        total_weight += weight_dict[i]
    return total_weight
weight('LN')


# In[47]:


def find_seq(s,t):
    total = []
    i =0
    while i < len(s):
        if s[i: i + len(t)] == t:
            total.append(i+1)
            i+=1
            print(i)
        else:
            i+=1

   
            
                
find_seq('AGGAGAA','AGAATGCAG')  


# In[129]:


sets = ["""AGATGGACTTACAGTAGATGGGATTCTGATGATTGTCTCGTGAGCTTGGTACAAACAATC
ACGTGCAGTTTCACTTTGCACAGGTGCAGTTGTATTACCTGGACCTCGGCCGTGGCTGCG
TCACCTGAGCACTTAGTCTGTGGAGTCCACATTCCGATGCGACCCGGTCCAATGCGCGAA
CATTGCATAATCGCTTGGTGACTGAATATGCATCGGGATTGTGCTCTCTCCGCCCAAGCG
AGATGAGAGACACTTCCCTGCTTCAGGACCGGTTCAGGGGAGAGGAAGTGTCGAGCGTCA
TATTTTAAATCATTGTACGACACGCAATACTTTCGTCCCAGGAGTGGCGATGCGGAATGG
CGTGTATCGACTGCCTCCATCGGTTCTGTTCAATCCTACAAACACGTGGACAAGAGCGGA
TATACATATTGCCTTCGCATTCACGCCCGGAATTCCTGATTCGAGCAGTCCTCGACTTCA
GAGCTGACGCGTCAGGGTTTGGTGGAGATCTCGAATGTCCAAGATAGGAAGCTGCTCAGA
TAGCGCCCGCATCATCGGGTGTAAAAGACAGCACTGAAGTCGAGTGAGGAAGGGAGCGGC
GTTCGCGCATACACAGGTCCTTCCCGGTACATTGTCCTTCTTGGATAATGTGAATTCTTA
GTCCCTCCCTCCTCCAAAGGGTTTGATTGATCAGTGACTCAGCCGAGAATTTTTCACGGT
AAACAATGCCCTCATCTTCCGCGGGTGTTTAATCTAGCGTACGTTCTACAACTACAAGAA
CCCGCGAGCAAAAATACTCCGGATGGCGATGCCATCGATTACGGAACCGATTTTAAGGAT
TGTATCACACTTAACTTACAGGCTGGTAAGTGTGGCCGACGGTCTGCGAGCTGCGTGCTC
ATTCTGTGCCAATCAACGCCAACCCTTGAGCAGGCGCGTACAGACGCTAGAATTACACGG
ATCGAACAT""", """GAATTGATTTCGCAGTAGAATGAATATAGTTTCTGATCCACGCTGTAGGGACATGACAAG
ATTCAGGTGTGTTGAGTACCACGGCATGATAGGGCAGGAGTGGTTCCGGCTGGGACGAAA
TTTTGATCGGATTAGCAGCCGGTATATCCTGTATCCAATGGCGGAAAGGGAGTAGCCTAG
AGCTTCATAGGCCGGAGCGGCAGATGGGTGGATAGTCTTTCACCGAATAGGTCCGAAATG
AGAGAAATCGACAGAAGGCCGCGTAATTGGCACCCCACCGCTGTGACCGGATCGCCATAC
AGAACCGGCTACACCGTAGGCCCATGTTAATCAGAGGCTTTTAAGGCGCTTAGTTTAGTA
CTAAAACTGTATACGCGTACAGAGAGACCACTCGATACCCCTCCGGTTTACTCCGTGCAG
ACCTGTTGTCTGTTCCCATGAGGTGTTGGTGCTAAAGTAAACTTGTTAAACGATTACACT
TGTAGGCAGAAAAAGTGCCACTGGAGCTCGCATGCATGGCTGATCAGGGGGCGGGCCATG
GATGCGTGACGTTCCGAGACCCACCCATGAGAGCATACGGTAGATACTCAAATTAGTATG
GTTCGAAGAGCTGCCCTTAGCCGTGACCTGATGTCTAGTCCGATGCTTCTAGGACGGCGT
GCCTCCATCTTCGTTGGGGCCGTCTAGGATTATCATTAACGACTAGGATACGCTCCCAAC
TTCTTACTCATAGTCCTGCAATATAAAGTAACCTCGTAGTTCCTCTGCCGTGTTAGCGTC
AGGAGTGGGGAAGCGAGGGACTGCGCCCTTGTGGCGCTTTATCGATCCGGCTGCTAAAGT
GTCTATAACGGTCGTTTACCCTTGATGGGAGGTAATATATCCCCTCGACAACGCTGCGTG
AGCTGTATTTGGCGTTATGGGGTAATAATAGCAATCGGGGAGTCAAGGGCACTTTCAAGA
TTTCTGGCG""", """CTTAACTCCGTGCTGCGGTTTGCTTCAGCGCGCCTATTGAAGTCTACTTAGGCTTACCAA
AACTTGTGCTAACTGTACCGACTACTTGGTTGACAACACGTCAAGTTTATGTCTCACCAA
TATTCCTAAGGCACATCCTAGGCTTGGGTGCAATCGGGGTACGTGCCCTATGCCCAGAGG
AATGTTACATGAAGAGTAGAGCGTGAATTAGAGCTCCGGGAGGAAGAAACCAATATGGCG
GTACCAGCCGCTTACCAACTAACTGGTACGCACAGCGACGAGCAAGGTCCACATACTATC
CACGCGGTACGCCGTCTGCAAGTTGGATCGGGTAGGTGCTAAGTGTTGGCCCTCTGTATT
TTCATTTCCGCGAGTGGACCGGTAGATCCACCCCTTACTCCTAACTTCTGTAAAGATGTG
TGTATCTACGGTGACCGTAGCCGTACCGACCTCCCTTGTCTTGCAACATCCCCACCGTGG
ATATCAACCCAGGAACCTTCCGCCAAACCTGCACGACTCCTTGCGGCGAAAGCCTATCAA
AGTCTAAAGCGTGCTCCCCTACCTCCCATAGACATGGTAAGATTGTGGTTCCTAACATCG
CCTAGGTCATGAAGCGGCAAATCATGAGGGTCAACAACGCGCCGGATTCTTTTTTCGCAA
CGTGAACTATCTTCAGAAACCATTACAATGTTTCCGTGTAATGTCGAGAGGTTTAATTGA
GTCATTTTCTTCATGAAGATTAGTATTTGGTTGTTGTTTTCGACAAATATCTAGTTTCCC
TAGTTGCCCAGTACGTTCTACTCCAAGCCTGTTCTCCGTCCTTTTATATGTTAGATATAC
TCCGTACACTTGGCGATCGACTATAGGGGAAGCGAAATCCTTTTGGGGCCAACGTATTCC
CAAGGCTGTTTCGAAGTCATCGGAGGACGGACGACGTGTCGCACTTACTGATTCTGTTAA
TTGCTAGAA""", """ACCTTAACATCCATGCGGTAGATCGTTTATCGATAAGGATTGTTCCACCGAAGCGAGCAG
GGTGGGTGTACGCTGAATCGAGCACCGCAGTTTCAACCGAGATACACTATGGATATCACC
CCCCGTCGGATTGGTGTCATACATTGTTGTGAAGGTTGCAGGGGGATACCCGAATGATAG
TCAGACCTCTAATGCCTTAACTGGTTAGTCAAGACGGTAGAGTTTTACATAATGTCGGAA
ACTTCTTTTTAAGAGCGAATCTTTGCATGCCCTATACTTCTAGACGTAAGGTGTCCCGAA
GCTATCGCGCACGTGTGGTACCTCTGTAGGAGCGCGGCAAATTGGATTATGCACTCGGGA
ACCCCTATTCGGGGACAGGCAAGGGTCTAACGGGGATTGTGCTGAGGCCTATGAGTACGA
CTGTGAATGGATTGCTCCCCGTGAGTAGGCGAAGGGCCTACCACCGGCGAGCGAGCGTGG
AAGTCGCGGATTGTACCGACGGGTTATTCTAGGTTCGGAGGGGCCCCCCACGCGAATCGG
ACATGATACTGACGCGCGTTGACGTTTTTGGACGGCGGAGAAGAGGTCTAGCGTCTTCAA
TCACTGGCTACGAATAGGACGAACCCCGAAACGATTACGGCCTCACCAGCATTATATATT
CTAGGGAGGTCATGACATCCGCTCCGAAGTACAACATTCGCAAAGGAGTTTAAAAAAGAC
CCGCAGTCAGTACCGGAAATGTTCCAGCCATTCGCGGATGACTACAAAAAACTATGAGTT
CGCAGAACTTATGAAAAATATTTTCAGACTGCATCGCGGGTAGGGCGGCCTCATGAAGAA
GCTTGACAAAACTGCAGAGGCACCAAATTTCATACTCGTATACATACAATCAGGCGCGTA
TGTGAAATACCGAACCACACGCCGTCTTACAGTACAACGAGAATCATTGAAAGCGAAGTC
CAGGAGTCG""", """ACAACAAAATGGCTTATCCAGAACCCTTTGTTGAAAGCACATTGAGGACTCGATACACCG
TAGCAATGATTTACCACATTTCCCTAAGCTGTTTGTCGCCCGACCAATGTGGATATTCCT
GGGTGGCCCCCCCCGAATGAGGGTTGCTGATATGTTTCCCTGTGCCAAGACTCTGCTTAG
ATCTATAGGGTGGACTGATTGGCCCGTGGCCCATCCATAACTCGGCTCTGGGCTTCTGAC
TTATAACGACTTATGGGAAAGACAACTCAACCTTACCCTAGGGTAACGAAGTGAAGGTTT
CTCCAATTGATTGGACAAAATTTTCTCTCGCCGTTGCCCGCATAGACGCATGTAGCGTAA
CCGAAATTTGTCAGAGCATGTTGTGAGACGTGTAGCAGCTGACTACACCGTAATCCGGAC
AAAAACCGGAGAAGGATATTAAACCCTAGGCACCAACGGTACTTCCGCGTATGATCAAGG
GTCCGGGTTTACGTACCGTCACTACTTACGTTGCATGCGTATATTCGCTGGCTACGAACT
TCGAGAACATTTCAGCCTTACGGTTAGTAGACATACACGCCGGTACCGACCTATCATTAC
GTCAGCCTGCTTTCGAAAGTTTCAGGGAGTCCGGAGCCACAGCGTTTGGTGCCCCACAGC
GGCCAGTAGAGTACAATGGGAGTCTTGCCCTTGCAAGGAAGCCGTAATGGGGGCGGCCAT
CTGCCTAAACCGTCCCTGACGTTTTGTCTATCGACAATGCTTCATGGTCGACCCTTCCCC
CCCCTGGTAGGAAACTTTCATAAAGTGTGCTCAGATCGTGCGAATGTGATGGCCTACGAG
AGTTCATATTCTTAGGGCTCCCCGCATACAGGCGACTGAATGAGTACGCGTTACGGACGG
GGGGACATTACAAACTCCATCTTACCAAAACGTCATATTCTGATCTAAGCCCGCCTATTT
ATTCATGGC""", """CGGTATCTATTTCACCGTCTTGTGACACCTCGGTGTTCGCGCTCGTACAGAGAGCTCATT
ATGTTATATTTTAAATTTATTGACCTCGAACACCCGAACAGGCGGCACGTGCTCCGTCCA
TAATGATTGTGAGCGGCGATCTCATAGGTATCCGTGCACCATTCTCCCACGCCTTAGGTC
GTGTGCGTAAATGCCACAAGCGGCTCTTCATAATAGGTGGCCAGCCAACCATGGTAAGTG
CAAGTCAGTGCTTGTCTTGCCTAATACAGTATCGGGGCACTGATTTTGTCGACGCATCGT
GGAAGAGGATTGGGAGTCAGTAGCAAGGGTACTCCGTCTGGTAGGACGGCTATCGGTTCA
GTAAATGTGGCTGTTGCTAAGGTCGGCCCGCGCTATAGCGTCGCGGTCCTGCGCGAAACA
GCCTGTATATGCTGGGCAACAGTCATAGTAGTTTACTGAGTTTTTACACTACGTGCCATC
GTTGGAGCTCAAGCTAGATAGTAAGGCCCTTAATCTCGATACCCGCAGAACGAGTACCGT
GGGTCGCCTAACGGGATTGACGGCGGGTTTGATATACGGGAACATATGTTGATGATAAGG
CCTGCCTCACATAGTAAGGCTGACTTGAGCCAAAGAAAGCTTCGAGCTCTACGTATCTTT
TACCGGCGTTACCTCCGAGCCAATCAAATACTCGACAGACAATGCAACATACTAAAGTGG
GCTCCGGCATCGTCTGTACCGATTGAGCCGATAGTGGAGACGGGAATAGAGATGGCGGAG
GACACCCTAGTCCTGTTGGTGAGAGAGCTACATTTCCGGAGCCGAGCCAGCTAAGAAAAC
TCGCTATGTTGCCTCGACTTAAGTGGGCTTCGCTATTTGACCAGTACTCTTCTTCTAGCC
CACCATGCCAACTTGCATTCCAGGAGGGAGGCCTCAGACCTGGGAGGAATTCGCCGGGCC
ATAAGGCGG""", """CGAGTTTAACCGTATGTTTCTGCACCGTGAGAAGCTCTGGCATTCTGCCTACCGGGCGGG
CACGTAGCCGATCGCTTTGAATGCAGTCCGAAAGATATCCACCATATTACACCGCTATCT
GGACTGCATTGCACGCCGCTTTTCTCATTACCCGTTGGACTTTAAGGCCCGGGAAAGGTG
ATACAAGATCATGGTTGTGAATGATTGTGCGCGTGGTGGTCGGATTAATTAAAAGTTGCA
AATAAGTGTCTTCTACCCCAAGCGTCACTTAATCCACTTAACCAGGAAGAAGGAAACTTA
CGTAGAAATGGAAGATAAGGAAGCAACGTATGTAGCGCCCGACATTCACCCAAGGGGGGC
GATTCCCAATCGGGGTCCCTCAGAGTATATATTAAATTGATAAACGGTGGACTAATCAAA
TTTTCGAGACATGGGTGTTTCAATTATTACCGATCCGGAAGGAAGGGTTTCTGAGCCACA
GAATGCGTAGCCCACATCTCCGATACAGAGTTGTGCGCCATCGCGCGTGGGTCTCCTTTC
ATGGAGACTTAACCTTTAGTTGATCGCCCAGCTCCAAGGCTATTCTTCAGCGAAGGAGAG
ATTAGAGCGTTTGCTGGCGTTTTGCACCTCTGGTCTGAGAATCGATCTTACAGGACAGTT
ATTTGTCGCCCAGACGTAACCAAAGGATACTAAGAGGGTTGGAAGTCCATATCCCCTCCT
ATTTACGCCAAAGGCGTAATTTACACACCAAAAGAACCAATTATTCGCGGGCTCGGCTAT
GTACACCCGTGGCTTGATGGGTGCGACAGTCCGGTCTCCACTGTTATGGGGGCAAAAACG
TTGATCAGCGCCCAGGATTCCGTGGCCCAGGTTGACTGGTACAAGCGTAAGCCTACAAGG
TATGCTTTTGCTAAATAACTCCACGACGCCCATGCTCACGCTCCGATTGCGAGATACGCA
CATCTTAGC""", """GCGCGAGTAATACAGGCTACCCAATGAGTCCAATTCTGGTTATCGTACTTCGGACCGGGA
TAATGGCAATGACCACTGATATCCGGGGCCGAACATGATTTGCATCCTAATACCAGTGCG
TTCAGATGAGCTGCCGGGTGTGGTCTGACCCTGCTAACCAGCCAGTCCTTACTCCCGTAG
GAAAATGCCGCTCTCTCACCCGGACTACAGGAAATGTTAACTATGTTCGGTCACGTCCGA
CTCATTGGACCGGCTCCTCTTCGTGCGAGCCTATTGCCTGCCTCTCACCGCCCCTATGCC
GCTCCCAGGCGTATTCCGTCACATATCCGCTCCCTGGGGGGCATGAGTCGGCGAGCAGGA
TGCCCCAATACGGTGTACTTATAGAGAGACCGATTCTGATGCCATCTTTAAGTTTTTCCC
CATACACAAGGCAGGGATGCCCCTTCAAGCATGGGACTCATGCATCAAATTCAGAGAATC
CTTAGAATTGCGACTACAGCCTTAAAAGACCTGCAGTGTCACAGACAAGCAGAGTGGAAC
CATGCTTCTAGAGGTGGTCGAGGGTGTATGTCATTACCACCAGTACATGCCACTTGGGGC
CAATATGTACTGCGCGGGCACCAGCTGTTTTTGCTACAGATTGGATAACCTGTTTTTCCT
TAACTTTTAGCCCAAGCGGGGTTAGGTCACCCCAAGCGTTAGGAAGCATGCACACGCCCA
AATTGAGGCGTTCCATACATGATATTTAAATTCGTCTATATAGTGTTGTTCCGTAATTTT
ATCAGACAACAACATTCATCATCTCGAAAGATCCTAGGCAATTCCTTTATTACATTAATT
TTGTACGTCTAGCCTGGCGGAAATCCCCGACGGCTATCTGTCCTAAACGCCTTCGGTCTA
TTAACTAAGTTATGCTCTCGGCGATTACCTCGCATCGGCTCGCGGTCTTTATAACAGGCA
GAGTTCACG""", """GTTGAAACGCACTCCATTTGCGGAAGAAGGTAACCCATAGCAATAGAGTCCTGAGTGCGT
AAAAAAGATATAACTCTCAACCAGGGATTCGGAGGAAACCGTCCATGTTTTTGCAGCTGG
CGACTCCAAACAGTGGACGACTTCGTCGTCCCAACCAGATTTTGACGCTCTTAGAACCCT
ATGATCCCCCCTAGAGGCGGTTCCTTAGCGTGCAACCATTATGAATGGCACGTGACTCAC
GCAGTTATATGGAATTACAAATGAGGTGCGCCCAGCGCGACCTAGAGAGGATACACCAGT
CCTCAGGACCTTCGTTCTCCGAGACTGATTACTTATCCAATCCGATGAGGGTTCACAAAA
TTTCATTTCGACGTACGCCTTAACTGGGAAGGGTATATGGCCGCTACGCGAATCCATCGT
AAAACTCTCCTAGCACTTACACTTCTAACTATATGCGCGGAAGCGGGTCTGTTTGCGGTG
GGGATCTCTCCGAGAGCGCGAGAAAGGCCAGTTAATTCGGTACCAATCAAAAGACGGTTC
TGGGCCGGACTAGCGTGCCCGACTAATTGCCCCCAAAAACGTACCGCTTATGTTTCGACA
CCTGAACACTACGTGGTCCTGAGTCACCACATATTGACGGTACGAGGATTGCATACCGAT
TGATCTGCGTGTAATTGCTTTAACCCTATTGATGGAATGCATGACCGAGTGCCACCAACC
GGGAAGCCTAAGGTTTATACTATCTTACGAGTCCGTCCCTTTCAACCTAATCTCGGCGAG
TCATTATTCACACGGCAGATATCCTTCGGACATGCTAGAGGAGGGAGCGCAGGTACGAGC
TTACCTTAGCCTGTACTTTTTCTTCTATGCCAGGATGGTCCGAATCCCGACTGGGAGTGT
GCCACTTACGCGTAGCAGCGTATGGTTTTAAACTGACCTACAAGGCCATTGAACAACGCA
GCGCCCAAG""", """ACGGGATGCCGAGTGATTTGATTGCAATAAATGTCGAGCCACCTTCAATACTCCCTAGCC
ACCTGCGACTGGGCGTTGAGCATGCCCCGACACATATTACCTGTCTATACGTCTCTTGAA
TCGTGTAACTTGCATTGAGTTCCAAGAGATACGAAGAACAGGTTGCCCTAGCAACTTTAC
TTGCTTGTTACGCGTAAGAATCGGCTATCGCAAAAATATGAAAGCTAGTCTTCCACCATC
GTGTTCCCAATCTGAATTGTCGCAAGGTGCAGTCTTGCGATGGGAGTATCGGAAAGATCT
GATGTCCATTAAATATGACGTATGACCGGCTGCGAGCTCTCTAGCGAGGTTCAGTTACGG
TCCTGACAGTAAGATGACCGTTACCACTAAGCAATACACTCCTTGTTCCCGGGCCGATAT
TACAAGCTCAAGCGTGCCGGGCGATCCGGGAACTTAACGCATAGTCTATTGGCACGTTCA
AGTAGATCTAGGGCTCGTAGCACATTACCGTATGGGCCCCCAAGGAGCGAAGGGCCAGAA
GTGAGCTTTGCATTTGTGCCCAGGGCCAGTATTACGGACAATACGTGGGGAGTTCGCCTT
GTTCCTAAGGCCCACACAGGGGCACAGGCCTATATCCATCGTGTAAGGGGCGCAGGGTAA
TTGCGCTGGATCTCTAAAATGAATGAGCAGATCTCTGCTCTCCGCAGTCTACGTCTGCTT
GAAACGTGAATATATTTTGTGTCCCAAGCAGTCGACCTCCGGCCTGGAAAAGTGGAGACC
AAGGGTAGTTAGAAGGTCGGAGGCGAGGTCGAACTGAGGCGCCGCTTCTGCATCTTCTAC
AGTGGTGACGCCTGTTGGTGTTGCGAAACAAACGTCGCGCGCCCAGTCACAAGCCGCACC
AGTGAGCGAACTAATGCGTCCTCGTGAGTGTGGTGTGACTTTGAGATATGTAAGAATCGA
GACAGAGCC"""]
def consensus(sets):
    A = []
    T = []
    C = []
    G = []
    i = 0
    while i < len(sets[0]):
        for j in sets:
            if j[i] == 'A':
                A.append(i)
            if j[i]== 'T':
                T.append(i)
            if j[i] == 'G':
                G.append(i)
            if j[i] == 'C':
                C.append(i)
        i +=1
    total_array = [A,C,G,T]
    totals = []
    a = 0 
    while a < len(sets[0]):
        for b in total_array:
            totals.append(b.count(a))
        a+=1
    totals_1 = np.array(totals)
    totals = totals_1.reshape(len(sets[0]),4).transpose()
    
    indes = (totals.argmax(axis = 0))
    concat = []
    for i in indes:
        if i == 0:
            concat.append('A')
        if i == 1:
            concat.append('C')
        if i == 2:
            concat.append('G')
        if i == 3:
            concat.append('T')
    listToStr = ''.join([str(elem) for elem in concat])
    print(listToStr)
    print("A: " + str(totals[0]))
    print("C: "+ str(totals[1]))
    print("G: " + str(totals[2]))
    print("T: " + str(totals[3]))
consensus(sets)


# In[152]:


import itertools
def permutations(n):
    enum = list(range(1,n+1))
    listed = list(itertools.permutations(enum))
    print(len(listed))
    for i in listed:
        print(' '.join(map(str,i)))
       
    
        
permutations(6)


# In[170]:


def splicer(DNA, introns):
    for i in introns:
        DNA = (DNA.replace(i, ''))
    DNA = Seq(DNA)
    print(DNA.translate(to_stop=True))
splicer("""TGCCATC""", ['AGAAACTGAC', 'TATGTATTACAAAAAGTTAGTAGGATCGTCTTTCGTGATTGTCGTGGC', 'GGTAGCTCAGCGGCGCATCTAGGGGCTCAGACGGCCATTCACCTT', 'CGACGACGAAGCCCGTTCGG', 'TGTAAAGCGCTCGGACTAGAAAGACTAGGCTAGGAA', 'TGGTACCTCACCAATGAAGGAAGAAGCAGCACAG', 'CGGCGGAGGTTTGAATGACTAATAGAGCACAGATATATAACACTCGCT', 'AATAGTTGCTATCTTCAGTTCCTATGATTGTGCCGCGGGCTAGC', 'CTTTAAGGGGCGTAGGC', 'GGTACTGTTCGTCCTGCATGTCTGTATTTACGATGCTCA', 'ATCTCGTGCTGGTTTCTTAATTCGGTGCCATCCATGGGGCCAA'])


# In[171]:


def haystack(strands, motif):
    for i in strands:
        print(re.findall(motif, i))
haystack()


# In[ ]:




